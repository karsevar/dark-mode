{"ast":null,"code":"import _slicedToArray from \"/Users/masonkarsevar/lambda-school/lambda-week8/day4/dark-mode/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nvar useDarkMode = function useDarkMode(key, initialValue) {\n  var _useLocalStorage = useLocalStorage(key, initialValue),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      value = _useLocalStorage2[0],\n      setValue = _useLocalStorage2[1];\n\n  var handleChanges = function handleChanges(updatedValue) {\n    setValue(updatedValue);\n  };\n\n  return [value, setValue, handleChanges];\n};\n\nfunction darkModeInterator() {\n  var _useDarkMode = useDarkMode('darkMode', false),\n      _useDarkMode2 = _slicedToArray(_useDarkMode, 3),\n      newDarkMode = _useDarkMode2[0],\n      newDarkSet = _useDarkMode2[1],\n      darkModeHandler = _useDarkMode2[2];\n\n  useEffect(function () {\n    var bodyElement = document.querySelector('body');\n\n    if (newDarkMode) {\n      bodyElement.className = 'dark-mode';\n    } else {\n      bodyElement.className = '';\n    }\n  }, [newDarkMode]);\n}\n\nexport default darkModeInterator;","map":{"version":3,"sources":["/Users/masonkarsevar/lambda-school/lambda-week8/day4/dark-mode/src/hooks/useDarkMode.js"],"names":["React","useState","useEffect","useLocalStorage","useDarkMode","key","initialValue","value","setValue","handleChanges","updatedValue","darkModeInterator","newDarkMode","newDarkSet","darkModeHandler","bodyElement","document","querySelector","className"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,eAAR,QAA8B,mBAA9B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,yBACbH,eAAe,CAACE,GAAD,EAAMC,YAAN,CADF;AAAA;AAAA,MAChCC,KADgC;AAAA,MACzBC,QADyB;;AAEvC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,YAAY,EAAI;AAClCF,IAAAA,QAAQ,CAACE,YAAD,CAAR;AACH,GAFD;;AAGA,SAAO,CAACH,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,CAAP;AACH,CAND;;AAQA,SAASE,iBAAT,GAA6B;AAAA,qBAC0BP,WAAW,CAAC,UAAD,EAAa,KAAb,CADrC;AAAA;AAAA,MAClBQ,WADkB;AAAA,MACLC,UADK;AAAA,MACOC,eADP;;AAGzBZ,EAAAA,SAAS,CAAC,YAAM;AAEZ,QAAMa,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAApB;;AACA,QAAGL,WAAH,EAAgB;AACZG,MAAAA,WAAW,CAACG,SAAZ,GAAwB,WAAxB;AACH,KAFD,MAEO;AACHH,MAAAA,WAAW,CAACG,SAAZ,GAAwB,EAAxB;AACH;AACJ,GARQ,EAQN,CAACN,WAAD,CARM,CAAT;AASH;;AAED,eAAeD,iBAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useLocalStorage} from './useLocalStorage';\n\nconst useDarkMode = (key, initialValue) => {\n    const [value, setValue] = useLocalStorage(key, initialValue);\n    const handleChanges = updatedValue => {\n        setValue(updatedValue);\n    };\n    return [value, setValue, handleChanges];\n};\n\nfunction darkModeInterator() {\n    const [newDarkMode, newDarkSet, darkModeHandler] = useDarkMode('darkMode', false);\n\n    useEffect(() => {\n\n        const bodyElement = document.querySelector('body');\n        if(newDarkMode) {   \n            bodyElement.className = 'dark-mode';\n        } else {\n            bodyElement.className = '';\n        }\n    }, [newDarkMode]);\n}\n\nexport default darkModeInterator;"]},"metadata":{},"sourceType":"module"}